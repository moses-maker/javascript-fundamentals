SUBTOPICS IN CLASS TOPIC
 • Object-oriented programming
 • Classes and objects
 • Classes
 • Inheritance
 • Prototypes


a) Object-oriented programming
- OOP is a very important programming paradigm wherein code is structured in objects, leading to more maintainable and 
reusable code
- Core OOP Concept: Inheritance: A key principle of OOP is inheritance, where a new class (like "Fish" or "Dog") can 
be created to inherit the properties of a more general parent class (like "Animal").
- JavaScript's Relationship with OOP is Different: Unlike languages such as Java or .NET, JavaScript is not a purely
 class-centric language; objects are used but are not the sole focus of the code.


 b) Classes and objects
 - objects are a collection of properties and methods
 - The properties of an object should have sensible names. So for example, if we have a person object, this object could have 
properties called age and lastName that contain values.
- Example:
    let dog = {
        dogName : "Bosko",
        weight:2.4,
        color: "brown",
        breed:"chihuahua"
    };

c) Classes
-classes are blueprint for object creation
- we use the class keyword to tell JavaScript we want to create a class. Next, we give the class a name.
n/b:  It is the convention to start class names with a capital letter.

constructors
-  The constructor method is a special method that we use to initialize objects with our class blueprint.
-  There can only be one constructor in a class.
-  This constructor contains properties that will be set when initiating the class.